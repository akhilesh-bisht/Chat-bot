import { GoogleGenerativeAI } from "@google/generative-ai";
import dotenv from "dotenv";
import KnowledgeBase from "../models/knowledgeBase.js";
dotenv.config();

const ai = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY);

export const getChatResponse = async (req, res) => {
  try {
    const { message } = req.body;
    if (!message) {
      return res.status(400).json({ error: "Message is required" });
    }

    // üîç 1. Fetch knowledge base from MongoDB
    const knowledgeData = await KnowledgeBase.find();

    const contextText = knowledgeData.map((doc) => doc.content).join("\n");

    // üß† 2. Setup Gemini AI model
    const model = ai.getGenerativeModel({ model: "gemini-1.5-flash" });

    // üìå 3. Try using knowledge base
    const prompt = `
      **‡§§‡•Å‡§Æ ‡§è‡§ï ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§ö‡•à‡§ü‡§¨‡•â‡§ü ‡§π‡•ã‡•§**
      ‡§®‡•Ä‡§ö‡•á ‡§¶‡•Ä ‡§ó‡§à ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ï‡•ã ‡§∏‡§Ç‡§¶‡§∞‡•ç‡§≠ ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•ã ‡§î‡§∞ ‡§∏‡§ø‡§∞‡•ç‡§´‡§º ‡§â‡§∏‡•Ä ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§â‡§§‡•ç‡§§‡§∞ ‡§¶‡•ã‡•§

      ***‡§∏‡§Ç‡§¶‡§∞‡•ç‡§≠:***  
      ${contextText}

      ***‡§™‡•ç‡§∞‡§∂‡•ç‡§®:***  
      ${message}

      ***‡§â‡§§‡•ç‡§§‡§∞ ‡§π‡§Æ‡•á‡§∂‡§æ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§¶‡•ã, ‡§ö‡§æ‡§π‡•á ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§Æ‡•á‡§Ç ‡§π‡•ã‡•§***
    `;

    const result = await model.generateContent({
      contents: [{ role: "user", parts: [{ text: prompt }] }],
    });

    let reply =
      result?.response?.candidates?.[0]?.content?.parts?.[0]?.text?.trim() ||
      "";

    // ‚ö†Ô∏è 4. Fallback to normal AI answer (if reply is not from knowledge base)
    const notHelpfulReplies = [
      "‡§Æ‡•Å‡§ù‡•á ‡§á‡§∏ ‡§∏‡§Ç‡§¶‡§∞‡•ç‡§≠ ‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§à ‡§â‡§§‡•ç‡§§‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§",
      "‡§Æ‡§æ‡§´‡§º ‡§ï‡•Ä‡§ú‡§ø‡§è, ‡§Æ‡•à‡§Ç ‡§â‡§§‡•ç‡§§‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§¶‡•á ‡§∏‡§ï‡§§‡§æ‡•§",
      "‡§â‡§§‡•ç‡§§‡§∞ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§",
    ];

    const isFallbackNeeded =
      !reply || notHelpfulReplies.some((r) => reply.includes(r));

    if (isFallbackNeeded) {
      const fallbackPrompt = `
        ***‡§™‡•ç‡§∞‡§∂‡•ç‡§®:***  
        ${message}

        ***‡§â‡§§‡•ç‡§§‡§∞ ‡§π‡§Æ‡•á‡§∂‡§æ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§¶‡•ã, ‡§ö‡§æ‡§π‡•á ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§Æ‡•á‡§Ç ‡§π‡•ã‡•§***
      `;

      const fallbackResult = await model.generateContent({
        contents: [{ role: "user", parts: [{ text: fallbackPrompt }] }],
      });

      reply =
        fallbackResult?.response?.candidates?.[0]?.content?.parts?.[0]?.text?.trim() ||
        "‡§Æ‡•Å‡§ù‡•á ‡§ï‡•ã‡§à ‡§â‡§§‡•ç‡§§‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§";
    }

    res.json({ reply });
  } catch (error) {
    console.error(
      "Chatbot Error:",
      error.response ? error.response.data : error.message
    );
    res
      .status(500)
      .json({ error: "‡§ï‡•Å‡§õ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•ã ‡§ó‡§à ‡§π‡•à‡•§ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§" });
  }
};
